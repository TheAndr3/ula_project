module somador_subtrator_4bits (
    input  wire [3:0] a,         
    input  wire [3:0] b,         
    input  wire modo_sub,    // 0=Soma, 1=Subtração
    output wire [3:0] s,         
    // saída para o Overflow 
);

    // Fio para o operando B modificado (será 'B' para soma, 'NOT B' para subtração)
    wire [3:0] b_modificado; 
    wire c1, c2, c3;         

    // 1. Inversor Controlável para o operando B (usando portas XOR)
    // Se modo_sub=0, b_modificado = b. Se modo_sub=1, b_modificado = NOT b.
    xor XOR0 (b_modificado[0], b[0], modo_sub);
    xor XOR1 (b_modificado[1], b[1], modo_sub);
    xor XOR2 (b_modificado[2], b[2], modo_sub);
    xor XOR3 (b_modificado[3], b[3], modo_sub);

    // 2. Somador de 4 bits (Ripple-Carry Adder)    
	 // O sinal modo_sub também serve como o Carry-In inicial (o "+1" da subtração)
    full_adder fa0 ( .a(a[0]), .b(b_modificado[0]), .cin(modo_sub), .s(s[0]), .cout(c1) );
    full_adder fa1 ( .a(a[1]), .b(b_modificado[1]), .cin(c1),       .s(s[1]), .cout(c2) );
    full_adder fa2 ( .a(a[2]), .b(b_modificado[2]), .cin(c2),       .s(s[2]), .cout(c3) );
    full_adder fa3 ( .a(a[3]), .b(b_modificado[3]), .cin(c3),       .s(s[3]), .cout(cout) );

endmodule
